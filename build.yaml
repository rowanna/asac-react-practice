name: build

# 워크플로우를 자동으로 트리거하고자 할 때, 어떤 이벤트에 연결할 것인지를 정의함
# master 브랜치에 push하거나 pull_request가 일어날 때 실행된다.
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# 각 Job은 동일한 러너에서 실행되는 워크플로우 steps들의 집합이다.
jobs:
  build:
  	# job이 돌아갈 머신을 고르는 구문
    runs-on: ubuntu-22.04
    # 사용할 환경변수를 고르는 구문. 프로젝트 환경설정에서 정의해 둔 Environments를 사용하도록
    # 지정할 수 있으며, 이 구문이 있어야 설정 페이지에서 만들어 둔 환경변수들에 접근 가능하다.
    environment: github-pages
    # gh-pages(깃헙 페이지 배포)를 위한 권한 설정
    permissions:
      contents: write
	
    # 각 job에서 실행할 명령들의 모음
    steps:
      # 리포지토리 코드를 CI 서버로 내려받고, 해당 브랜치로 전환하는 액션
      - uses: actions/checkout@v4
		
      # node.js 18 버전을 사용하도록 설정
      - name: Use Node.js 23.6
        uses: actions/setup-node@v3
        with:
          node-version: 23.6

      # node_modules 폴더를 캐싱한다.
      - name: Cache node_modules
        id: cache
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          # package-lock.json 파일의 변경이 발생했을 경우 새로 캐싱될 수 있도록 한다.
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          # cache hit이 발생하지 않았을 경우, restore-keys 에 있는 것을 꺼낸다.
          restore-keys: |
            ${{ runner.os }}-node-

	  # 캐시 히트가 발생하지 않으면 npm install 명령을 실행한다.
      # 단 기존의 restore-keys 캐시에 저장된 node_modules 기반으로
      # 추가된 패키지만 설치하기 때문에, 아예 처음부터 node_modules 폴더를 생성하는 것보다
      # 시간이 적게 걸린다.
      - name: Install dependencies
        run: npm install
        if: steps.cache.outputs.cache-hit != 'true'
		
      - name: Build project
        run: npm run build

      # 빌드된 파일들(./build)을 gh-pages 브랜치로 배포하는 작업. gh-pages의 원리에 대해선 후술
      - uses: peaceiris/actions-gh-pages@v4
        with:
          # 이 GITHUB_TOKEN 환경변수는 기본적으로 주어지는 것으로 별도로 생성할 필요는 없다.
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build